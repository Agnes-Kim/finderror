58. bug report number : ['7696']
comment number: 197200010 
body: Travis fails with:

```
test/net_tests.cpp(93): error: in "addrman_tests/caddrdb_deserialiation": check addrman1.size() == 3 has failed
test/net_tests.cpp(105): error: in "addrman_tests/caddrdb_deserialiation": check addrman2.size() == 3 has failed
```

But only in one configuration.
 

comment number: 197298916 
body: Concept ACK, more tests are better. Haven't verified the tests though.
 

comment number: 197375145 
body: @paveljanik The non-determinism of the test passing is worrying especially because the test that was failing was not testing new behavior. I haven't been able to replicate this failure locally, any idea what is happening with it?
 

comment number: 197376035 
body: Can someone add the labels bug and data corruption.
 

comment number: 200908357 
body: Concept ACK.

Instead of relying on the output of CAddrDB::Read to be "clean" in case of an error I'd prefer a different approach, though: ignore and reset its output when the function fails. In my experience this is a more robust approach - it's easy to forget resetting it in some code path. In a lot of APIs the output of failing functions is thus undefined.
 

comment number: 201039632 
body: @laanwj I'm not sure I follow, do you want the "clearing" to happen closer to the source of the error? In the serialization code? 
 

comment number: 201223722 
body: @EthanHeilman At the call site:

```
        if (adb.Read(addrman))
            LogPrintf("Loaded %i addresses from peers.dat  %dms\n", addrman.size(), GetTimeMillis() - nStart);
        else {
            addrman.clear(); // Addrman can be in an inconsistent state after failure, reset it
            LogPrintf("Invalid or missing peers.dat; recreating\n");
            DumpAddresses();
        }
```

It's hard to _guarantee_ that `adb.Read` won't leave the passed addrman in an inconsistent state after failure in all possible internal code paths. This would at least catch all possible cases.

The cleanest way if we had a clean slate, I think, would be to have Read return an `AddrMan*` which is `null` if an error happened, then instantiate a new one on faiilure. But as we have that global object that's too impactful.
 

comment number: 201350876 
body: @laanwj Good idea, I amended the commit to include addrman.Clear in StartNode's Read() error condition.
 

comment number: 211538159 
body: Does this pull-request need any additional changes?
 

comment number: 211924495 
body: I still don't really like passing the hash into bool CAddrDB::Read, I think it makes for an awful API :)
 

comment number: 217037535 
body: @laanwj I removed hash from CAddrDB::Read 
 

comment number: 217203200 
body: utACK 1475ecf61141e03f63a79d59831c411e0e8a5c0a
 

comment number: 217219099 
body: @EthanHeilman Looks good to me now, thanks. utACK
 

59. bug report number : ['7639']
comment number: 191757415 
body: Some infos?
Self compiled, platform, etc.?
If the debug.log was written before the crash, can you share it?
Crash report?
 

comment number: 191758154 
body: This is a completely un-actionable issue without more information.

Can you get a traceback (e.g. with gdb)?
 

comment number: 192298053 
body: @laanwj This is running the .exe provided by bitcoin.org on MS Windows. It seems to happen more when it has to rescan the wallet, and seems to stop after having rescanned the wallet from block 0. I am doing further testing. Please let me know if there are any specific tests you would like me to do.
 

comment number: 196249014 
body: Being addressed by #7674 
 

60. bug report number : ['7596']
comment number: 188626108 
body: I've also taken a [packet capture](https://github.com/bitcoin/bitcoin/files/146022/bitcoind_freeze.pcap.zip) for 45.59.67.242:23938 peer=5.
 

comment number: 188627831 
body: Looks like someone else is having a [similar issue](https://github.com/bitcoinclassic/bitcoinclassic/issues/105) with that exact same peer even on classiccoin.
 

comment number: 188649761 
body: Interesting, so if you manually make an outbound connection to that IP you get a different subver.
{
    "id": 2,
    "addr": "45.59.67.242",
    "addrlocal": "redacted:62167",
    "services": "0000000000000001",
    "relaytxes": true,
    "lastsend": 1456384895,
    "lastrecv": 1456384895,
    "bytessent": 131736,
    "bytesrecv": 1288853,
    "conntime": 1456384364,
    "timeoffset": -1,
    "pingtime": 0.063569,
    "minping": 0.063569,
    "version": 70012,
    "subver": "/Satoshi:0.12.99/",
    "inbound": false,
    "startingheight": 399938,
    "banscore": 0,
    "synced_headers": 399940,
    "synced_blocks": 399940,
    "inflight": [
    ],
    "whitelisted": false
  }, 
 

comment number: 188677440 
body: A workaround I noticed is to disconnect a node from my 8 (allowing a new node to be connected to) after which a new block comes in. But just the one block. I didn't list IP addresses so I can't confirm the rest of the issue.
 

comment number: 188679451 
body: @zander I just used setban on that IP address for now, but that's obviously not a long term solution for this sort of issue. I'm allowing incoming connections on this particular node.
 

comment number: 213404638 
body: setban is certainly not a solution for incoming Tor connections.
 

comment number: 213405488 
body: Somewhat improved in 0.12.1 by #7832
 

comment number: 213416726 
body: This stall happened twice in a row for same block using 0.12.1 for Tor peer and later for clearnet peer. 10 minutes between these log messages.
 

comment number: 254122821 
body: #5099 I believe might fix the issue seen here. A semi-serious suggestion, given how old it is, but I am curious to know if it does solve it (despite being so old), as if it does it might warrant me getting it rebased (and better coded).
 

61. bug report number : ['7580']
comment number: 187695013 
body: Agree. Maybe we should do the [#ifdef introduced in 7083](https://github.com/bitcoin/bitcoin/pull/7083/files#diff-c865a8939105e6350a50af02766291b7R1029) the "opposite way". If OPENSSL_VERSION_NUMBER >= 0x10100000L use `OpenSSL_version(OPENSSL_VERSION)` if not use `SSLeay_version(SSLEAY_VERSION)` by default...
 

comment number: 187699821 
body: LibreSSL has these defines,

```
#define LIBRESSL_VERSION_NUMBER 0x2030200fL
#define LIBRESSL_VERSION_TEXT   "LibreSSL 2.3.2"
#define OPENSSL_VERSION_NUMBER  0x20000000L
#define OPENSSL_VERSION_TEXT    LIBRESSL_VERSION_TEXT
```

so currently it would need to be something like "if defined(LIBRESSL_VERSION_NUMBER) || (OPENSSL_VERSION_NUMBER < 0x10100000L)".
 

comment number: 187708415 
body: #7520?
 

comment number: 187714190 
body: I can confirm sthen's suggestion fixes the issue.
 

comment number: 187715540 
body: @AliceWonderMiscreations can you please check #7520?
 

comment number: 187716790 
body: Duplicate of #7515 and #7447
This was fixed in #7520, which should be backported to 0.12.1.
 

comment number: 187959766 
body: Same issue exists in
    src/qt/rpcconsole.cpp
 

comment number: 188094534 
body: @AliceWonderMiscreations you can PR the similar fix :-) Will you try to contribute?
 

comment number: 188101603 
body: @paveljanik done - sometimes I forget how easy github makes it to do those things.
 

62. bug report number : ['7494']
comment number: 182163839 
body: please tag wallet.
 

comment number: 182178033 
body: I'm working to attach debug.log and wallet.dat. If you need further verbosity or any other files, let me know, and I'll try to reproduce the error again to produce these for you. It's pretty straightforward to reproduce the issue, but time consuming and doesn't happen every time.  It's happened to me enough times in the last few days, though, that I think I'll be able to.

Machine specs are: AMD E-350 Processor, 6 GB RAM, Windows 10 Pro, 64-bit.
Bitcoin Core 0.12.0rc3 64-bit.

bitcoin.conf:
daemon=1
server=1
maxuploadtarget=144
prune=550
 

comment number: 182178664 
body: Here is the debug.log and wallet.dat:
https://dde19c9eff451e7e0b7d819897f53dd506692a8f.googledrive.com/host/0B2Wm1faUufb7N3J5QkRFeHpRUkk/Bitcoin_prune_debug.zip
 

comment number: 182322835 
body: Haven't looked at the wallet and debug.log yet, but at first glance it appears that when it is blasting though large number of blocks (e.g. during initial sync, or when catching up) it is possible for the wallet (at least the state synced to disk, even on a clean shutdown) to lag behind more than the amount of blocks that is retained.
 

comment number: 182377080 
body: From that wallet.dat:

```
bestblock 0000000000000000006b500f79750a2c5a48da5ad2a13fed6cdaffade6cada25 ...
```

So block 373499. According to the debug.log the chain was way ahead of that before shutting down for the last time:

```
2016-02-10 00:11:27 UpdateTip: new best=000000000000000004fd3098365fb488f31f013ee41d0de63bdb7b4b0aa1dcb2  height=373816  log2_work=83.32589  tx=83020932  date=2015-09-10 04:35:03 progress=0.854354  cache=20.6MiB(12251tx)
```

(373816 -373499)=317 blocks to be exact.
 

comment number: 182385005 
body: It seems that the bestblock descriptor in the wallet is not updated when flushing occurs for pruning, which is a bug. It could explain the issue here, but only in the case of an unclean shutdown (as the bestblock descriptor is always updated on clean shutdown).
 

comment number: 182388474 
body: As the debug.log does show a clean shutdown, I hope this doesn't mean that there are problems with clean shutdown not being as clean as we think. But updating the bestblock descriptor when flushing for pruning would probably solve the immediate issue.
 

comment number: 182484684 
body: @laanwj It looks to me like a clean shutdown still doesn't update the bestblock descriptor if it has been less than an hour.  So I think this problem could happen with clean shutdowns but will be fixed properly by #7502.
 

comment number: 182489932 
body: @morcos Nice catch. I think that explains it.
 

comment number: 182755272 
body: > @laanwj It looks to me like a clean shutdown still doesn't update the bestblock descriptor if it has been less than an hour

Yes that must be the problem then :(

Solved by #7502 (which is in rc5)
 

63. bug report number : ['7420']
comment number: 175155216 
body: Grr, these checks never got added to the buildsystem. That's my fault, doing that now.
 

64. bug report number : ['7418']
comment number: 174762021 
body: Make sure that you don't have a peer selected when you hit ctrl+tab or ctrl+shift+tab as that will only move the cursor among the peer entries
 

comment number: 174806741 
body: I don't even know how I would describe the current ctrl + tab behavior when I have a peer entry selected. It appears that if I push and hold it it moves down the list, but if I just press it once, sometimes it moves it and sometimes it doesn't. Whatever its trying to do is very unintuitive and I would rather just use up/down arrow to move around the grid (works properly).

I'm not sure if this matters, but I'm on Win7 64bit. 
 

comment number: 174807978 
body: I see that same weird movement too on Ubuntu 12.10. I
 

65. bug report number : ['7381']
comment number: 173169343 
body: Fixes #7379 I suppose?
 

comment number: 173170175 
body: utACK
 

comment number: 173185233 
body: > Fixes #7379 I suppose?

There are other issues with salvagewallet, so I can't guarantee that.
 

comment number: 173185660 
body: - Backported to 0.12 as 621bbd88baf7e8f50a015905070e19f71a53f8b9
- Backported to 0.11 as c40ec1421048e7ddb9eb1878e4c65ff27aa066c8
- Backported to 0.10 as b0c97ce31a93caa0037c67a0dc133b8873911070
 

comment number: 173187348 
body: > There are other issues with salvagewallet, so I can't guarantee that.

Right, I meant the specific problem. It's never possible to guarantee that you've solved _all_ bugs. If only...
 

comment number: 173190720 
body: Nice catch!
Thanks for fixing.
Post merge ACK.
 

66. bug report number : ['7366']
comment number: 172376826 
body: Thanks for the report. Interesting.
What OS? Did you compile yourself?
 

comment number: 172377092 
body: I am running ubuntu 15.10.
Yes, I compiled it myself.
 

comment number: 172377427 
body: What is the version you have upgraded from? What language is set when the crash happens?
 

comment number: 172378090 
body: It is a fresh install, although the datadir is copied from my windows machine. The windows machine had 0.11.2 running when it created the datadir.

The language is English
 

comment number: 172459167 
body: @achow101: just testes on Ubuntu 15.04. Can't reproduce.
What happens it you use regtest (`./bitcoin-qt -regtest`) or if you temp. rename your datadir (to force creating a new one)?
 

comment number: 172498320 
body: This would be an opportunity to test the new `-resetguisettings` flag. This clears the GUI-specific options so you should (hopefully) be able to enter the menu again.
 

comment number: 172527670 
body: @jonasschnelli Same thing happens with a new datadir. The problem also occurs when I use the downloaded binaries and my own gitian binaries.

@laanwj `-resetguisettings` flag didn't change it.
 

comment number: 174569985 
body: @achow101 If you're able to compile yourself, can you run bitcoin-qt in gdb and get a traceback of the assertion?
The problem is that it points into qt and not into our code so as long as we can't reproduce it, it's impossible to diagnose the issue using just this information.
 

comment number: 174582322 
body: @laanwj This is what I get when I run it in gdb

```
Program received signal SIGABRT, Aborted.
0x00007ffff3c7d267 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55
55  ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
```

Edit: I would give you the core file generated but it happens to be kinda big for github. Also, do they reveal sensitive information?
 

comment number: 175573803 
body: Yes, if you are running a wallet the a core file contains private keys etc. Be really careful with it.

But do make a backtrace using 'bt', otherwise you just get the upmost entry on the stack.
 

comment number: 175630144 
body: This is the backtrace

```
#0  0x00007faa6cab0267 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:55
#1  0x00007faa6cab1eca in __GI_abort () at abort.c:89
#2  0x00007faa6eefec88 in QMessageLogger::fatal(char const*, ...) const ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#3  0x00007faa6eef9e31 in qt_assert_x(char const*, char const*, char const*, int) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#4  0x000055c165d39b53 in QList<QString>::at (i=0, this=0x7ffe5f624830)
    at /usr/include/x86_64-linux-gnu/qt5/QtCore/qlist.h:478
#5  OptionsModel::data (this=<optimized out>, index=..., role=<optimized out>) at qt/optionsmodel.cpp:186
#6  0x00007faa6fc614a0 in QItemDelegate::setEditorData(QWidget*, QModelIndex const&) const ()
   from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#7  0x00007faa6fc95620 in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#8  0x00007faa6fc9671f in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#9  0x00007faa6fc9682c in QDataWidgetMapper::setCurrentIndex(int) () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#10 0x000055c165d33825 in OptionsDialog::setModel (this=this@entry=0x7ffe5f624a50, model=0x55c166c17510)
    at qt/optionsdialog.cpp:150
#11 0x000055c165d0b6b2 in BitcoinGUI::optionsClicked (this=0x55c166a2bbc0) at qt/bitcoingui.cpp:593
#12 0x000055c165d887c5 in BitcoinGUI::qt_static_metacall (_o=0x55c166a2bbc0, _c=<optimized out>, _id=<optimized out>, 
    _a=<optimized out>) at qt/moc_bitcoingui.cpp:209
#13 0x00007faa6f12178a in QMetaObject::activate(QObject*, int, int, void**) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#14 0x00007faa6f9b5172 in QAction::triggered(bool) () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#15 0x00007faa6f9b7618 in QAction::activate(QAction::ActionEvent) () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#16 0x00007faa6f122651 in QObject::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#17 0x00007faa6f9b7b61 in QAction::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#18 0x00007faa6f9beb8c in QApplicationPrivate::notify_helper(QObject*, QEvent*) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#19 0x00007faa6f9c4230 in QApplication::notify(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
#20 0x00007faa6f0f0f1b in QCoreApplication::notifyInternal(QObject*, QEvent*) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#21 0x00007faa6f0f3057 in QCoreApplicationPrivate::sendPostedEvents(QObject*, int, QThreadData*) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#22 0x00007faa6f147e73 in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#23 0x00007faa6bc9fff7 in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#24 0x00007faa6bca0250 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#25 0x00007faa6bca02fc in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#26 0x00007faa6f14827f in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#27 0x00007faa6f0ee75a in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) ()
   from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#28 0x00007faa6f0f62cc in QCoreApplication::exec() () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
#29 0x000055c165cec6d6 in main (argc=2, argv=0x7ffe5f625858) at qt/bitcoin.cpp:667
```
 

comment number: 175632605 
body: Hmm... strange.
`OptionsModel::data (this=<optimized out>, index=..., role=<optimized out>) at qt/optionsmodel.cpp:186`
Refers to: `mapper->addMapping(ui->connectSocks, OptionsModel::ProxyUse);` in our code.
Can't see a reason why this should cause a crash.
 

comment number: 175668800 
body: Wouldn't this refer to https://github.com/bitcoin/bitcoin/blob/38bf790d70b5eba2d3280f8c4809b15d386e3433/src/qt/optionsmodel.cpp#L186 ?
 

comment number: 175671390 
body: @MarcoFalke: yes. Right! 
@achow101 do you set a proxy ip without port?

We need to fix this anyways.
 

comment number: 175683241 
body: How would a malformed IP end up in the settings; Is the sanitization   that worse with  pre-#7025 versions?
 

comment number: 175716354 
body: Well he already did -resetguisettings, so the malformed data, wherever it comes from, shouldn't be coming from the QSettings. You'd say it must be from bitcoin.conf or the command line.
 

comment number: 175737067 
body: @jonasschnelli I don't have any proxy set.
 

comment number: 175740988 
body: OK, I fixed it. Apparently the config file where QSettings saved the settings was not accessible by my user account, it was owned by root. After I changed the permissions on it the problem went away.
 

comment number: 175745366 
body: Interesting. Weird that Qt doesn't raise a clearer exception but crashes on an assertion.
 

comment number: 196098219 
body: @achow101 I've got a newbie question...  Which config file please?
 

comment number: 196100540 
body: The file is ~/.config/Bitcoin/Bitcoin-Qt.conf
 

comment number: 196302325 
body: I've, curiously enough, been unable to reproduce this.

``` bash
chown root:root .config/Bitcoin/Bitcoin-Qt.conf .config/Bitcoin/Bitcoin-Qt-testnet.conf
chmod 600 .config/Bitcoin/Bitcoin-Qt.conf .config/Bitcoin/Bitcoin-Qt-testnet.conf
```

No crashes at all. Just the expected result that the GUI options are no longer used.

Ubuntu 14.04, Qt 5.2.1.
 

67. bug report number : ['7278']
comment number: 168607182 
body: Bug confirmed. Coin control does not update the fee when a output gets removed.
 

68. bug report number : ['7275']
comment number: 168506115 
body: In Bitcoin Script, all numbers are signed, and CLTV uses the existing mechanism.
 

comment number: 168506126 
body: then how to check for block 255?
 

comment number: 168506141 
body: (if I use 0x02ff00 it won't work)
 

comment number: 168506147 
body: (as it thinks I am adding zeroes when I shouldn't)
 

comment number: 168506452 
body: What error do you get, exactly?
 

comment number: 168506533 
body: Negative locktime
 

comment number: 168506743 
body: What error do you get when pushing FF 00?
 

comment number: 168506872 
body: SCRIPT_ERR_NEGATIVE_LOCKTIME
 

comment number: 168506925 
body: oh - no error
 

comment number: 168506953 
body: but doesn't work
 

comment number: 168507171 
body: error: {"code":-26,"message":"64: non-mandatory-script-verify-flag (No error)"}
 

comment number: 168507428 
body: (so literally it told me "No error")
as the error :D
 

comment number: 168507837 
body: Nice catch, that's a bug in the reporting. I'll fix that.
 

comment number: 168507977 
body: so - how should I redeem with block 255?
use 0x02ff00 or something else?
 

comment number: 168508012 
body: btw - you can't send "coinbase' to P2SH using regtest either
 

comment number: 168508060 
body: (it screws up the sigScriptPub)
 

comment number: 168508105 
body: One issue at a time please.

0xFF00 is indeed how you'd encode 255.
 

comment number: 168508143 
body: thanks - I can create another issue for the other problem - should I do that?
 

comment number: 168508244 
body: Yes.

See https://github.com/bitcoin/bitcoin/pull/7276/files
 

comment number: 168517522 
body: Will this work correctly with 3 byte blocks also?
(such as 0x03ffff00)
(am not sure exactly what your change does but noticed the change was from check to check2)
 

comment number: 168520320 
body: @ciyam @sipa's change seems to fix the bug where you got "No error" rather than the actual error message. Please redo your test with his patch and report what the real error is.
 

comment number: 168520385 
body: Actually I think you are right - and I assume that the "Negative locktime" error will still happen.
(I am not actually currently able to use anything other than a released version of Bitcoin though)
 

comment number: 168521419 
body: the relevant code in "interpreter.cpp" is this:
                    // In the rare event that the argument may be < 0 due to
                    // some arithmetic being done first, you can always use
                    // 0 MAX CHECKLOCKTIMEVERIFY.
                    if (nLockTime < 0)
                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);
(the comment is interesting as it seems to indicate there is some way to handle the negative values)
 

comment number: 168521900 
body: @ciyam If you pass in a negative number (0x01FF is negative 127), you will get an error about a negative number.

It would be nice if you can redo your test with #7276 merged (that should fix the "No error" reporting when there is a clear failure nonetheless).
 

comment number: 168522165 
body: Unfortunately I don't have the time to set up an environment for doing testing with Bitcoin but hopefully others that are playing around with the new OP_CHECKLOCKTIMEVERIFY will. I think the issue is easily enough repeated for others to show.
 

comment number: 168523667 
body: If the rule is that all stack values for Bitcoin scripts are "signed" then I guess there is perhaps a fundamental problem here (as nLockTime is unsigned).
 

comment number: 168523736 
body: @ciyam You are confusing two things. The fact that all script numbers are signed does not prevent you from creating values that are in range for CLTV. In fact, the input numbers to CLTV can be up to 5 bytes (instead of 4) to account for exactly that.
 

comment number: 168524493 
body: okay - but does your change allow for 5 bytes?
(if it does then I guess the problem is resolved)
clearly we need it to work for: 0x017f, 0x02ff00 and 0x03ffff00 at the very least
 

comment number: 168533904 
body: My change? The patch I'm linking to just fixes a bug so it stops reporting
"No error" but reports the actual error.
 

comment number: 169952028 
body: Closed by  #7276
 

69. bug report number : ['7228']
comment number: 165697145 
body: I believe we should catch bad_alloc separately in ProcessMessages, and either crash instantly, or call AbortNode.
 

comment number: 165697241 
body: I don't understand how this can cause ConnectBlock to fail, though.
 

comment number: 165970710 
body: Also encountered this during some IBD tests some weeks ago... 
 

comment number: 282456296 
body: Duplicate of #9854. 

70. bug report number : ['7105']
comment number: 160061475 
body: Concept ACK.
I think this solution performs much better then #7067.
Have plans to add tests for this soon.
 

comment number: 160152667 
body: Seems to have a deadlock or infinite loop.
 

comment number: 160170692 
body: Fixed 3 bugs (infinite loop, marking the accepted rather than conflicting tx, and not rebroadcasting), and added some debug output.
 

comment number: 160194472 
body: All rpc tests pass now, including the txn-doublespend.py one which tests negative confirmations.
 

comment number: 160197667 
body: I tried this on an old wallet that has a number of conflicts in it... they show as 'confirmations": 0,'.  (On master, they show as -1). "So much for tests."

Edit: Reading the code, I think this might be intentional. Bleh. I don't think it's acceptable to silently turn -1 confirmed count transactions to 0s in an upgrade, even if we release note it.  I think we need to either find a way around that or force a rescan.
 

comment number: 160198667 
body: @gmaxwell You'll need to rescan for them to be detected.

I don't mind adding some "fall back" logic to guess historical conflicts, but it can't be accurate, as we have no guaranteed way of knowing about them.
 

comment number: 160199034 
body: @sipa: I'd be okay with it if it was too conservative, e.g. showing an evicted historical transaction as conflicted.
 

comment number: 160199134 
body: @gmaxwell It can't work even for spends of outputs that were very recently spent, along with all other outputs of those transactions.
 

comment number: 160199184 
body: As an aside Concept ACK; I like tracking the conflicts explicitly and knowing the conflict depths will be nice.
 

comment number: 160199231 
body: Maybe we just need a separate class like "limbo" which means unconfirmed, not known to be conflicted, but also not in the mempool?
 

comment number: 160288476 
body: Added release notes about this change.
 

comment number: 160291881 
body: Limbo sounds useful.  Damn I love this patch, but do not love the inaccurate data on a non-rescanned wallet.
 

comment number: 160296311 
body: Added a "trusted" field to listtransactions output for unconfirmed transactions.
 

comment number: 160413293 
body: Rebased.
 

comment number: 160609039 
body: Tagging as 0.12: this fixes the problem that evicted wallet transaction's inputs are automatically considered respendable.
 

comment number: 160615362 
body: Yes, should definitely be in 0.12, should be mentioned that this a fix for a bug where the wallet silently re-spends old transactions because they've been evicted from the mempool, or if they've never been in the mempool (`-walletbroadcast`).

Edit: The UI regards everything with <0 confirms as 'conflicted', it does not distinguish between different negative values. This is good, it needs no change for this.
 

comment number: 160618625 
body: @laanwj It may make sense to distinguish in the UI between 'unconfirmed' (meaning in mempool) and something else like 'limbo' (meaning not in mempool)? RPC exposes this via the "trusted" field.
 

comment number: 160668542 
body: **Tested ACK.**

Extended the PR with two commits:
https://github.com/jonasschnelli/bitcoin/commits/2015/11/sipa_realconflicts
(mempool limit / eviction RPC test + GUI transactions details improvement).

<img width="732" alt="bildschirmfoto 2015-11-30 um 16 51 07" src="https://cloud.githubusercontent.com/assets/178464/11476349/90def9a4-9782-11e5-9726-6ca9fdf70d89.png">

<img width="732" alt="bildschirmfoto 2015-11-30 um 16 45 54" src="https://cloud.githubusercontent.com/assets/178464/11476292/37d0b21c-9782-11e5-9bef-f8df23738ad1.png">
 

comment number: 160735174 
body: The network is trying to advise wallet immediately of wtx conflicts.  We should not stick our fingers in our ears and sing.  These should be added to the wallet rather than showing up only when confirmed.
 

comment number: 160739331 
body: So what do you propose?
- Pass every mempool rejected transaction to the wallet? That would
  trivially allow dust attacking your system.
- Only pass rejected transactions that are not rejected because of validity
  or policy? Now it's trivial to bypass.

Yes, more information about double spends is useful, but using the P2P
network for it is only useful for cases where it wasn't intented as an
attack. And those case exist too.

Now, can we please talk about the bugs that this patch is intended to
address? The incorrect assumption that whatever coins aren't spent by the
mempool can safely be considered available for other transactions. That too
will reduce (accidental) double spends.
 

comment number: 160750837 
body: I think this change is good and don't mean to go off topic.  It does move a little toward more historical info and less real-time info, by not marking unconfirmed conflicts as visibly.  There is a lot going on in those few minutes.  It's good to see the wallet providing more information and hopefully soon, more control.

Since you asked, I think the first non-clone conflict of a mempool tx should be relayed, and added to the wallet if the wallet conflicts, with some protections.
 

comment number: 160891863 
body: utACK
 

71. bug report number : ['7103']
comment number: 159922278 
body: Tested ACK.

Works (tx size 373 bytes, txfeerate is 0.01, fee = `0.00373`):

``` shell
Jonass-MacBook-Pro:_bitcoin jonasschnelli$ ./src/bitcoin-cli --regtest getbalance
47.98861600
Jonass-MacBook-Pro:_bitcoin jonasschnelli$ ./src/bitcoin-cli --regtest settxfee 0.01
true
Jonass-MacBook-Pro:_bitcoin jonasschnelli$ ./src/bitcoin-cli --regtest getnewaddress
n1YGgjMuRDCEL9PDoMXKeEMzE4Z5gYNHKC
Jonass-MacBook-Pro:_bitcoin jonasschnelli$ ./src/bitcoin-cli --regtest sendtoaddress n1YGgjMuRDCEL9PDoMXKeEMzE4Z5gYNHKC 1.0
ccfb9f516f7935fe53d8c8dfbda2ba9f573a516da465124d4a3f02e9afb1c009
Jonass-MacBook-Pro:_bitcoin jonasschnelli$ ./src/bitcoin-cli --regtest gettransaction ccfb9f516f7935fe53d8c8dfbda2ba9f573a516da465124d4a3f02e9afb1c009
{
  "amount": 0.00000000,
  "fee": -0.00373000,
  "confirmations": 0,
  "txid": "ccfb9f516f7935fe53d8c8dfbda2ba9f573a516da465124d4a3f02e9afb1c009",
  "walletconflicts": [
  ],
  "time": 1448546094,
  "timereceived": 1448546094,
  "details": [
    {
      "account": "",
      "address": "n1YGgjMuRDCEL9PDoMXKeEMzE4Z5gYNHKC",
      "category": "send",
      "amount": -1.00000000,
      "label": "",
      "vout": 1,
      "fee": -0.00373000
    }, 
    {
      "account": "",
      "address": "n1YGgjMuRDCEL9PDoMXKeEMzE4Z5gYNHKC",
      "category": "receive",
      "amount": 1.00000000,
      "label": "",
      "vout": 1
    }
  ],
  "hex": "0100000002194adfb873b92507d4004b34910ea2e48f673be6c2d46b2408123e59b581f043000000006a47304402203bc41e34daa2ec5f795c38ef31c6d6fe926682609ebaca41ad50867b810d49b902203028f9334df4415da1f0c12ce76211c70583e853e3bb3158508b973b1b659ab4012102d9ce185100c65ba09aaf0d634fb86632ad73a54ff510f833e00348f4bb9edc47feffffff194adfb873b92507d4004b34910ea2e48f673be6c2d46b2408123e59b581f043010000006b483045022100e7fd9fc3a9e0d3ca6e8724e3daf330a1afe5de801e58c5f2193aaed25723d24d0220503460a151301d304f00b6d16364c9cb128e0005eda24950d6436a5b23a86baf01210339167b46e7774585f439d4780919e2dee5af9023cdef4778e245aa40c7650a04feffffff02e09def05000000001976a914d8d20ef3bdd8a263461b5463673cb901716bd88288ac00e1f505000000001976a914dba2489ddc1bfc465632141b8c5e1f3e1fd4a16888ac5b000000"
}
```

Tested also together with the UI (known bug/interference still behaves likes expected).
 

comment number: 159923054 
body: utACK
 

comment number: 159923711 
body: utACK
 

comment number: 160104145 
body: @gmaxwell can you take a look here too
 

comment number: 160338923 
body: Trivial rebase. (Previous head: fa895cb)
 

72. bug report number : ['6970']
comment number: 154990796 
body: Nice catch! I was also looking for the NULL pointer access... we need to be careful by always keeping in mind: `#ifdef ENABLE_WALLET != pwalletMain available`.
 

comment number: 154990806 
body: utACK
 

comment number: 154998049 
body: ACK
Checked other instances, OK.
 

comment number: 155013443 
body: utACK
 

comment number: 155025552 
body: utACK

On Monday, November 9, 2015, Daniel Cousens notifications@github.com
wrote:

> utACK
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bitcoin/pull/6970#issuecomment-155013443.
 

comment number: 155027466 
body: > backported to 0.11

yes and utACK.
 

comment number: 155031557 
body: Good news: the issue doesn't exist in 0.11 (and hence not in any released version)

This problem was introduced in 506bae3ac94ae9d5edfa794d9b80a7c9921ace17 (#6262) by @dexX7 . The code used to check for `ISMINE_*`, which can only be `ISMINE_NO` if there is no wallet, but that check was removed there.
 

comment number: 155058041 
body: ut ACK
 

comment number: 155069946 
body: Thanks for the quick fix!
 

comment number: 155076690 
body: @jlopp Did it fix your issue? (I still don't see how this can cause a SIGILL in OpenSSL)
 

comment number: 155230592 
body: @laanwj Yes, I confirmed that my node no longer crashes after issuing the validateaddress command. As for the other errors I had posted in my comments, those were errors that the debugger was throwing immediately upon trying to run bitcoind, not upon calling validateaddress.
 

73. bug report number : ['6963']
comment number: 154542693 
body: Upon closer review, it's not the block template request that causes the crash, it's the validateaddress call. I have reproduced it via the RPC interface:

```
 curl --user miner --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "validateaddress", "params": ["mq4oDPjmNWnBxbzx7qouzhpCSTMePUtYDF"] }' -H 'content-type: text/plain;' http://192.168.1.3:18332/
```
 

comment number: 154546342 
body: Can you check dmesg to see if you simply ran out of memory?
 

comment number: 154547332 
body: Yeah, that was the first thing I checked since it's the most common cause. But it's not a memory issue this time; I've reproduced the problem multiple times with my node after it has only been running a couple minutes - memory usage is quite low since it's testnet.
 

comment number: 154547770 
body: Can you run it in the debugger and reproduce?
 

comment number: 154548880 
body: Is it possible you've started this bitcoind up with -disablewallet?  I think that can trigger this crash on validateaddress.
 

comment number: 154550205 
body: @sdaftuar You're exactly right: I configured --without-wallet which would have done it. I'll recompile with it enabled and report back if it's still crashing. Either way, it seems like a hard crash is not the behavior we'd want for any RPC call...
 

comment number: 154554763 
body: Obviously needs fixing!
 

comment number: 154584480 
body: I recompiled with the wallet enabled and it works fine. Validating an address certainly shouldn't require wallet functionality, and the fact that this RPC call is not disabled when the wallet is disabled leads me to believe that the intention is for it to work in either case.

https://github.com/bitcoin/bitcoin/blob/master/src/rpcserver.cpp#L318
 

comment number: 154585099 
body: It should work with the wallet disabled.
On Nov 6, 2015 4:21 PM, "Jameson Lopp" notifications@github.com wrote:

> I recompiled with the wallet enabled and it works fine. Validating an
> address certainly shouldn't require wallet functionality, and the fact that
> this RPC call is not disabled when the wallet is disabled leads me to
> believe that the intention is for it to work in either case.
> 
> https://github.com/bitcoin/bitcoin/blob/master/src/rpcserver.cpp#L318
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/bitcoin/bitcoin/issues/6963#issuecomment-154584480.
 

comment number: 154725296 
body: Upon further testing, I cannot reproduce this bug while running on mainnet. I'm thinking that this bug is testnet-specific while running with the wallet disabled.
 

comment number: 154730098 
body: Can't reproduce in the current master compiled with `--disable-wallet` on the testnet. The answer is (after `json_pp`):

```
{
   "error" : null,
   "id" : null,
   "result" : {
      "isvalid" : true,
      "scriptPubKey" : "76a91468bedce8982d25c3b6b03f6238cbad00378b8ead88ac",
      "address" : "mq4oDPjmNWnBxbzx7qouzhpCSTMePUtYDF"
   }
}
```
 

comment number: 154731843 
body: Hm; maybe this is also ARM-specific? I'm reaching out to the Bitseed team to see if they can reproduce. I don't have any experience running bitcoind in a debugger; any recommendations / documentation for next steps I should take?
 

comment number: 154732675 
body: Instead of running `./bitcoind -testnet ...`, run

```
gdb bitcoind
> run -testnet ...
```

Try to crash it now. Then use the command `where` in gdb.
 

comment number: 154734601 
body: Unfortunately it seems to be crashing immediately in the debugger...

```
linaro@btc:~/bitcoin$ gdb src/bitcoind
GNU gdb (Ubuntu 7.7-0ubuntu3) 7.7
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from src/bitcoind...done.
(gdb) run -testnet -disablewallet
Starting program: /home/linaro/bitcoin/src/bitcoind -testnet -disablewallet
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/arm-linux-gnueabihf/libthread_db.so.1".
Cannot access memory at address 0x0

Program received signal SIGILL, Illegal instruction.
0xb6d0a248 in ?? () from /lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
```
 

comment number: 154738445 
body: Why `sudo`?
 

comment number: 154738661 
body: I tried it both with and without sudo; same error each time.
 

comment number: 154740064 
body: How is `bitcoind` compiled? Can you recompile with `--enable-debug`?
 

comment number: 154740897 
body: Hi, this is Jay from Bitseed.  The most recent version I have built is v0.11.1.  validateaddress is not something I would specifically test.  The main issues I have seen building on armhf are missing dependencies or incorrect versions of dependencies.  I can run a build here.  Are you building from Master?
 

comment number: 154743275 
body: Just tried `validateaddress` on a mainnet node with current master with `--disable-wallet`. Works for me.
The question is: why would you wan't to use `validateaddress` in wallet disable mode? It's a utility function only then. Why not using something like https://github.com/petertodd/python-bitcoinlib or https://github.com/libbtc/libbtc? IMO there is no need for a RPC roundtrip for a such utility only function.
 

comment number: 154743535 
body: @jonasschnelli there have been quite a few incorrect address validator code snippits out there. There is nothing wrong with using Bitcoin Core for this, especially if you're already using it for other things.
 

comment number: 154743669 
body: We could just as easily build it into bitcoin-cli and avoid the server round-trip.
 

comment number: 154744601 
body: @jgarzik Only parts of it, e.g.:

```
  "ismine": true,
```

can't be made `-cli` only thing. The same applies to `iswatchonly`.
 

comment number: 154745214 
body: Please; the cost of forking bitcoin-cli and linking in all its libraries and such is significant enough that special casing this would be a waste of time and review bandwidth. 
 

comment number: 154747512 
body: bitcoin-cli would be the wrong binary. `bitcoin-tx` is the current utility application, but right now, its a bit limited to transaction manipulation/creation.
But sure, there is nothing wrong with using the RPC server for this. I would just reconsider my API design if I would run a intensive business and validate serval addresses per second over RPC.
 

comment number: 154752693 
body: Nod - for addresses, the plan has always been a separate "bitcoin-key" utility, which lets you play around with addresses and keys
 

comment number: 154771436 
body: Agreed, this would be better removed from the RPC for such a trivial utility function.  However,  its still a crash opportunity in its current state.
 

comment number: 154834593 
body: @paveljanik I'm still not having any luck with the debugger...

```
./autogen.sh
./configure --enable-debug
make
gdb src/bitcoind
GNU gdb (Ubuntu 7.7-0ubuntu3) 7.7
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from src/bitcoind...done.
(gdb) run
Starting program: /home/linaro/bitcoin/src/bitcoind 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/arm-linux-gnueabihf/libthread_db.so.1".
Cannot access memory at address 0x0

Program received signal SIGILL, Illegal instruction.
0xb6d0a248 in ?? () from /lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
```
 

comment number: 154944983 
body: SIGILL in libcrypto. Interesting.
If I have to guess, your OpenSSL is compiled with instruction set enabled that are not supported on your board.
If it's not that then it's jumping to an invalid address somewhere... Does 'bt' still work in gdb to get a backtrace?
It is also good to see what instruction is crashing it. Try `x/10i $pc`.

> Is it possible you've started this bitcoind up with -disablewallet? I think that can trigger this crash on validateaddress.
- Tried on a node compiled with `--disable-wallet`: validateaddress works fine
- Tried when compiled with wallet, but `-disablewallet` at run time: bitcoind crashes:

```
Program received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7fffed7fa700 (LWP 23455)]
0x00005555556f90e1 in DescribeAddressVisitor::operator() (this=this@entry=0x7fffed7f9a00, scriptID=...) at rpcmisc.cpp:131
131             if (pwalletMain->GetCScript(scriptID, subscript)) {
```

This is different from your SIGILL crash.
 

comment number: 155250547 
body: @laanwj Your patch fixes the validateaddress crash I reported :+1: 

As for the crash I experience in the debugger, here's the output I get from those commands:

```
(gdb) run -testnet -disablewallet
Starting program: /home/linaro/bitcoin/src/bitcoind -testnet -disablewallet
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/arm-linux-gnueabihf/libthread_db.so.1".
Cannot access memory at address 0x0

Program received signal SIGILL, Illegal instruction.
0xb6d0a248 in ?? () from /lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
(gdb) bt
#0  0xb6d0a248 in ?? () from /lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
#1  0xb6d07ef0 in OPENSSL_cpuid_setup () from /lib/arm-linux-gnueabihf/libcrypto.so.1.0.0
#2  0xb6fea20e in call_init (l=<optimized out>, argc=3, argv=0xbefff6e4, env=0xbefff6f4) at dl-init.c:78
#3  0xb6fea2a0 in _dl_init (main_map=0xb6fff958, argc=3, argv=0xbefff6e4, env=0xbefff6f4) at dl-init.c:126
#4  0xb6fdfbf2 in _dl_start_user () from /lib/ld-linux-armhf.so.3
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) x/10i $pc 
=> 0xb6d0a248:  mrc 15, 0, r0, cr9, cr13, {0}
   0xb6d0a24c:  bx  lr
   0xb6d0a250:  ldrex   r2, [r0]
   0xb6d0a254:  add r3, r2, r1
   0xb6d0a258:  strex   r2, r3, [r0]
   0xb6d0a25c:  cmp r2, #0
   0xb6d0a260:  bne 0xb6d0a250
   0xb6d0a264:  mov r0, r3
   0xb6d0a268:  bx  lr
   0xb6d0a26c <OPENSSL_cleanse>:    eor r12, r12, r12
```
 

comment number: 155452386 
body: It's trying to read the PMCCNTR register: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0363g/Bgbcefbc.html
Looks like it is probing for support of that CPU feature, which is absent in your case. The debugger gets the first dibs on any signal so gets it before OpenSSL's own signal handler, which would have proceeded as normal.
OK, thanks, seems this issue is resolved.
 

74. bug report number : ['6889']
comment number: 151200974 
body: utACK
 

comment number: 151273994 
body: The issue that this PR solves was introduced in https://github.com/bitcoin/bitcoin/pull/6722
 

comment number: 151288951 
body: utACK
 

comment number: 151334207 
body: utACK
 

75. bug report number : ['6840']
comment number: 148918081 
body: Here is the full log that I have.
http://sebsauvage.net/paste/?9a8243edb52a669a#McTIeTHqqLa+SSMke9+qSefgRZmA2bgQthdhhBjj884=

I want to get my node working again, but also want to help get this issue debugged. My plan is to restart my node with -reindex in the next day or two to try to resolve the issue, but I don't want that to blow away any data that might be needed.
 

comment number: 148961382 
body: > 2015-10-13 01:41:03 receive version message: /BitCoinJ:0.12SNAPSHOT/Satoshi:0.11.0/: version 70001, blocks=378647, us=127.0.0.1:8333, peer=10716

Not sure if related,  but is it normal for there to be so many new peers? (sounds like it is the same one over and over)

**edit**: In fact, this takes up most of the first third of your log.
It also seems to be binding to your local interface instead of your public (which most 'other' nodes seem to be connecting to).

Is there anything irregular about your set up other than just `bitcoind` on a box?
 

comment number: 148979990 
body: Um... I wonder if that is a bitcoin client that I am running from my phone. I run both Bitcoin Wallet and MyCelium on my Android phone. When I am home, my phone would be on the same LAN as my bitcoin computer.

Anything irregular... It is a Windows 7 64bit box. I use symlinks to put the blocks on a different drive than the rest of the bitcoin files (C:\Users\PRabahy\AppData\Roaming -> F:\Bitcoin and F:\Bitcoin\blocks -> E:\Bitcoin_blocks). I sometimes run Armory on the machine that runs Bitcoin-qt. I always run Bitcoin-qt with the wallet disabled. I think that covers it for stuff that would be relevant to Bitcoin not working properly.
 

comment number: 149463054 
body: Relevant part seems to be:

```
2015-10-15 01:23:49 ERROR: AcceptBlockHeader: block is marked invalid
2015-10-15 01:23:49 ERROR: invalid header received
2015-10-15 01:23:49 ProcessMessages(headers, 2593 bytes) FAILED peer=2
```

Looks like the next block in the chain is somehow marked invalid.
Could you try `reconsiderblock` on the block it is stuck on, as well as the block after it?
 

comment number: 149463147 
body: What version did you upgrade from?
 

comment number: 149524223 
body: I upgraded from 0.11.0. I'll try reconsiderblock if it gets stuck again, but I started a -reindex yesterday. I am currently 30 weeks behind.
 

comment number: 149722228 
body: Reindex fixed it. I'm not sure if there is going to be much more that we can do.
 

comment number: 149824597 
body: Yes, unfortunately: not enough information to troubleshoot, no path to reproduce this
 

comment number: 150065519 
body: I just upgraded to 0.11.1 and I too now see a great many "VerifySignature failed: Non-canonical signature: S value is unnecessarily high"

Edit: Ubuntu 14.04, using bitcoin ppa
 

comment number: 150182092 
body: @hwinkler Yep, that's expected. It is mentioned in the "Test for LowS signatures before relaying" section of https://bitcoin.org/en/release/v0.11.1. Basically its a step forward in reducing and eliminating transaction malleability.
 

76. bug report number : ['6777']
comment number: 146379252 
body: Tested, `"gettxoutsetinfo"` now works as expected.

Based on a quick scan for `value()` it looks like the only other place where raw iterator data is used, is related to the block index DB: [src/txdb.cpp#L205](https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/txdb.cpp#L205) (which isn't obfuscated)
 

comment number: 146379556 
body: @dexX7 thanks for testing. I'm going to go ahead and apply the same treatment to the block index DB as well so that we won't have an issue if we decide to obfuscate it in the future.
 

comment number: 146379883 
body: jamesob: I think the obfuscation/deobfuscation should be done in
Leveldbwrapper, not in the individual clients.
 

comment number: 146383381 
body: Okay @sipa, I'm thinking I'll just subclass leveldb's Iterator for the purposes of `CLevelDBWrapper`, then return that type from `NewIterator`.
 

comment number: 146385088 
body: jamesob: see the code in #2802 for that :)
 

comment number: 146385962 
body: @sipa ha! and like magic... wish writing code was always this easy ;). Will cherry-pick and layer on modifications if possible.
 

comment number: 146558687 
body: Good catch @domob1812 , thanks for fix @jamesob @sipa 

I'm getting an issue starting bitcoind on my node w/ obfuscation, though:
`assertion "hashPrevBlock == view.GetBestBlock()" failed: file "main.cpp", line 1694, function "ConnectBlock"
Abort trap (core dumped)`

Not sure whether it's related to this, will investigate further. From debug.log:

```
2015-10-08 14:05:08 Using obfuscation key for /home/orion/.bitcoin/chainstate: 0000000000000000
...
2015-10-08 14:05:19 LoadBlockIndexDB: transaction index disabled
2015-10-08 14:05:20 Initializing databases...
```

Looks like my obfuscation key was lost, and it's now trying to interpret the data in raw.
debug.log unfortunately doesn't go back far enough to check what the key was before.
 

comment number: 146566931 
body: Found the issue. Indeed has nothing to do with this pull. On my node I was using a previous version of your patch, using a different `OBFUSCATE_KEY_KEY`. So no, the key was not lost, just misplaced. This shouldn't affect anyone starting with master.

``` patch
 // Prefixed with null character to avoid collisions with other keys
-const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY = "\000obfuscate_key";
+//
+// We must use a string constructor which specifies length so that we copy
+// past the null-terminator.
+const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY("\000obfuscate_key", 14);
```
 

comment number: 146568849 
body: Tested ACK. `gettxoutsetinfo` works again after this.
 

comment number: 146580941 
body: @laanwj good to hear. Thanks for testing.
 

comment number: 146598136 
body: I've added some test coverage on the `CLevelDB` utilities. Provided travis is happy, I'm done adding changes.
 

comment number: 146940499 
body: @sipa any comments here?
 

comment number: 146942747 
body: Code ACK, I haven't reviewed the tests.
 

comment number: 147127589 
body: Ping on this. I think it's ready for merge.
 

comment number: 147674057 
body: @jamesob Yes going to merge this now, I've been sidetracked by the upnp vulnerabilty the last few days.
 

77. bug report number : ['6749']
comment number: 144982476 
body: Bitcoin Core or bitcore?
 

comment number: 144988154 
body: Bitcoin Core.

Resolved this by making him remove the Bitcoin-Qt structure using regedit. Would be handy to have a command-line flag to reset the options at start.
 

comment number: 157688122 
body: > Resolved this by making him remove the Bitcoin-Qt structure using regedit. Would be handy to have a command-line flag to reset the options at start.

Wouldn't `-proxy=127.0.0.1:19999` overwrite the option at start?
 

comment number: 157695266 
body: > > Resolved this by making him remove the Bitcoin-Qt structure using regedit. Would be handy to have a command-line flag to reset the options at start.
> 
> Wouldn't -proxy=127.0.0.1:19999 overwrite the option at start?

Good point. It would not overwrite the setting (different layer), but temporarily allow to start bitcoin-qt and allow to change/reset the setting over the GUI.
 

comment number: 157722618 
body: Is there any priority when qt parses the args and config and overwrites the other?

E.g.
- `-paytxfee` **is overwritten** by qt
- `-proxy` **overwrites** qt
 

comment number: 157724294 
body: It uses `SetSoftArg()` = `Set an argument if it doesn't already have a value` for some shared parameters like `-dbcache`, `-par`, `-spendzeroconfchange`, `-upnp`, `-listen`, `-proxy`, `-onion` and `-lang`.

This means, the GUI settings _can't_ override the command line startup or bitcoin.conf arguments.
 

comment number: 157746758 
body: Oh, it's `updateGlobalFeeVariables()` which does the overwrite. (Which it shouldn't do)
 

comment number: 158068512 
body: The priority for settings is _supposed_ to be (from highest to lowest priority):
- Command line
- `bitcoin.conf`
- QSettings (in case of UI)
- Base defaults
 

comment number: 254517778 
body: For anyone who ends up here looking for the registry keys used by bitcoin-qt's settings, these are the following:

```
HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt
HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt-testnet
```
 

78. bug report number : ['6735']
comment number: 342696142 
body: This has been solved a long time ago. 

79. bug report number : ['6715']
comment number: 142721675 
body: ACK
 

comment number: 142755322 
body: utACK
 

comment number: 142828465 
body: Tested. Passes in a previously crashing situation.
 

comment number: 142884529 
body: utACK
 

80. bug report number : ['6704']
comment number: 141949514 
body: Concept ACK
 

comment number: 142037240 
body: Ok, Travis workaround backported and passing now.
 

comment number: 142334691 
body: ACK.
Going to merge this to make Travis pass again.
 

81. bug report number : ['6703']
comment number: 141756106 
body: Not sure about fd9e6c8509354ba0e88a664127416bc0ae5d647b ("tests: Remove old sh-based test framework"), don't see a urgent need for backporting this. I think - once finalized/merged – we might add #6694 to this PR.
 

comment number: 141757046 
body: I was including fd9e6c8509354ba0e88a664127416bc0ae5d647b because the tests removed are _broken_ and don't work. But I don't feel strongly either way.
 

comment number: 141949749 
body: Concept ACK
I thnk this needs bfadae3 to avoid the travis issue
 

82. bug report number : ['6702']
comment number: 149838579 
body: BTW: GetTempPath is only used by the tests.
We should probably move it to 'testutils' or such.
 

comment number: 215391418 
body: Moving the call to testutils, as suggested above, was done in #7667 which was merged. 
 

83. bug report number : ['6701']
comment number: 227668499 
body: Should have been closed by #7667 ?
 

comment number: 227685289 
body: Well we still use the function, albeit only in testing. Deliberately interfering with test results on a multi-user system is such a minor concern I agree it doesn't really warrant keeping open an issue.
 

84. bug report number : ['6688']
comment number: 141265387 
body: Concept ACk
 

comment number: 141273982 
body: @morcos in this case, you can just remove that scoping block. 

utACK
 

comment number: 141298451 
body: This is unfortunate. Can we do reading the block from disk without lock, at least? E.g. the i/o itself. cs_main is extremely contended, it's not nice to hold it during longer operations.

Though utACK anyway...
 

comment number: 141331987 
body: @dcousens oops, thanks..   also removed another unnecessary scoping block.
 

comment number: 141636260 
body: utACK,  agreed with @laanwj,  but that is something we should address in another PR IMHO.
 

85. bug report number : ['6595']
comment number: 138292825 
body: utACK,  concept ACK.
 

comment number: 138328154 
body: Untested ACK.
 

comment number: 138587004 
body: ACK.

FYI I think that it's worth thinking about this code again if we consider merging #6216, because I believe with the anti-fee sniping use of nlocktime we may end up purging a lot of transactions from the mempool  whenever there is a reorg.
 

comment number: 138590569 
body: Longer term, I think it's better to change the invariant for the mempool
from "Valid for the expected next block" to "will be eventually valid".
Accepting non-final transactions then becomes a policy question, rather
than a consistency requirement. It would also speed up block disconnects,
which is a good thing  as reorganizations are already slower than normal
block connects - they shouldn't need this extra cleanup work on top.
 

comment number: 138742155 
body: I'm not too worried about changing the mempool invariant...mostly because I think (someone should audit to be sure), that this code would work as-is if it were just called once at the end of a reorg instead of after each bock disconnect.
 

comment number: 139041031 
body: @sipa I was the one who added that invariant in the first place, and I only meant it as a DoS attack defence, not as a true invariant. In fact, IIRC my original proposal was that we'd allow txs into the mempool so long as they'd be valid in the next two or three blocks.

As for calling it at the end of a reorg, that looks fine to me modulo issues raised in my comments.
 

comment number: 154153649 
body: Rebased at #6915
 

86. bug report number : ['6582']
comment number: 134165769 
body: ~~Confirmed (but maybe also a different error than @apoelstra, but probably same root).
Just tested with a corrupted regtest wallet and got:~~

```
Using wallet wallet.dat
init message: Verifying wallet...
CDBEnv::Open: LogDir=<snip>/regtest/database ErrorFile=/<snip>/db.log
Failed to rename wallet.dat to wallet.1440416498.bak
Error: 
Error: 
Shutdown: In progress...
```

~~From the BDB docs:~~

> The DB->rename() method may not be called after calling the DB->open() method on any DB handle. If the DB->open() method has already been called on a DB handle, close the existing handle and create a new one before calling DB->rename().

~~If I follow the code correctly, we do a `Open` before we try the `DB->rename()`.~~

~~Will try to write a fix.~~
 

comment number: 134180337 
body: Sorry. Reported wrong.
Works for me.

If the `wallet.dat` if fully corrupted like @apoelstra "echo" example, a rename is not possible (results error 22 = Invalid argument). If a salvaging is possible, the rename does work independent from current working directory.
If the rename locations are faulty (on some os), it is very likely a upstream issue because our code calls: 

```
int result = dbenv.dbenv->dbrename(NULL, filename.c_str(), NULL,
                                       newFilename.c_str(), DB_AUTO_COMMIT);
```
 

comment number: 134277587 
body: @jonasschnelli it's possible I misunderstood the problem because I replaced `dbrename` with a cstdio `rename` to get the errno output. Then I assumed `rename`'s "file not found" problem was the same one that `dbrename` was giving me (which was actually "database too corrupted to be opened").

Does that explain both our observations?
 

comment number: 134962985 
body: @apoelstra: my tests did show me that `dbrename` will response with `invalid argument` if the database is "too corrupted". `File not found` is also possible, but only happened in my test if i have used a non-existing filename.
The filename is relative because `dbrename` assume that we already have initialized a db context (with path/file, etc.).
 

comment number: 159205048 
body: Looks like the user changed code which may have resulted in this problem, the issue is inactive, so closing.
 

87. bug report number : ['6571']
comment number: 132735183 
body: Updated to behave like a singleton in order to avoid static init issues.

I've verified with a locally hacked up openssl:

``` diff
diff --git a/crypto/ec/ec_curve.c b/crypto/ec/ec_curve.c
index b435620..3b8192c 100644
--- a/crypto/ec/ec_curve.c
+++ b/crypto/ec/ec_curve.c
@@ -1130,7 +1130,9 @@ static const ec_list_element curve_list[] = {
     {NID_secp192k1, &_EC_SECG_PRIME_192K1},
     {NID_secp224k1, &_EC_SECG_PRIME_224K1},
     {NID_secp224r1, &_EC_NIST_PRIME_224},
+#if 0
     {NID_secp256k1, &_EC_SECG_PRIME_256K1},
+#endif
     /* SECG secp256r1 is the same as X9.62 prime256v1 and hence omitted */
     {NID_secp384r1, &_EC_NIST_PRIME_384},
     {NID_secp521r1, &_EC_NIST_PRIME_521},
```

The result is as-expected:

```
cory$ ./bitcoind 
Error: OpenSSL appears to lack support for elliptic curve cryptography. For more information, visit https://en.bitcoin.it/wiki/OpenSSL_and_EC_Libraries
Error: Initialization sanity check failed. Bitcoin Core is shutting down.
```
 

comment number: 133028392 
body: utACK
 

comment number: 133033628 
body: backported to 0.11 as 100ac4e185545c3924869227e271641f0484db0f
 

comment number: 133203339 
body: utACK
 

88. bug report number : ['6565']
comment number: 131981227 
body: utACK.
 

comment number: 132041164 
body: Couldn't this be done using a scope bound, RAII locking mechanism instead?

utACK
 

comment number: 132065677 
body: @dcousens: Oh, hey, it looks like there actually is a reverse lock: http://www.boost.org/doc/libs/1_55_0/doc/html/thread/synchronization.html#thread.synchronization.other_locks.reverse_lock

I'll reimplement tomorrow, should be much cleaner.
 

comment number: 132077805 
body: I like the reverse lock approach :)
 

comment number: 132235424 
body: Re-wrote it with a reverse_lock, it's much nicer now
 

comment number: 132236677 
body: utACK
 

comment number: 132386982 
body: utACK,  good find @casey 
 

comment number: 132617852 
body: /me really likes this solution. An inverse lock :-)
utACK.
 

comment number: 133163448 
body: boost::reverse_lock is new as of 1.50 :(

We either need to set that as the minimum version required or work out a different fix here.
 

comment number: 133172556 
body: The reverse lock implementation is very simple. If we can't bump the minimum required boost version to 1.50, I could copy pasta it in.

Alternatively we could just go back to the first implementation, which, although ugly, works fine.
 

comment number: 133189963 
body: I see no reason why we wouldn't be able to bump? 
 

comment number: 136096230 
body: Debian wheezy is 1.49 please do not bump the required version.
 

comment number: 136096850 
body: Also ran into the same problem like @pstratem. I solved it with a dist upgrade to jessie... which is somehow not ideal. Support for boost 1.49 would be good but not urgently necessary.
 

comment number: 136099448 
body: Boost 1.49 was released on February 24th, 2012.
Boost 1.50 was released on June 28th, 2012.
Debian 7.8 was released on January 10th, 2015.

Why the lag on a 4-month older package?
 

comment number: 136428404 
body: Opened PR #6608, to revert and fix without a boost dependency.
 

89. bug report number : ['6556']
comment number: 131443512 
body: Nice catch. Changing the | into an & seems simpler, though.
 

comment number: 131645864 
body: Agreed,  the `&` would be much clearer here and is more typical for a masking operation of this type.
 

comment number: 131851900 
body: I thought about `&` but I wasn't confident it was ok to change the previous behavior.
I also couldn't see how to make it as short?
`vchRet.push_back(GetByte(15 - nStartByte) & (((1 << nBits) - 1) << (8 - nBits)));`
or 
`vchRet.push_back(GetByte(15 - nStartByte) & ~((1 << (8-nBits)) - 1));`
 

comment number: 131853481 
body: Good point, we shouldn't change the existing behaviour.

ACK
 

comment number: 131866085 
body: utACK.
Would be nice if there would be test coverage in `netbase_tests.cpp` for this.
 

comment number: 132633635 
body: utACK.
There was a similar error in the netmask parsing.
Agree @jonasschnelli that unit tests for this function would be nice.
 

comment number: 132705259 
body: Ok writing unit test.  I have a question about `IsLocal()`, since those addresses are also `!IsRoutable()` they will be lumped in the `NET_UNROUTABLE` group instead of having their own group.  The check for `IsLocal()` on line 932 is meaningless.  Is that expected?  Changing that would obviously change existing behavior.
 

comment number: 133036385 
body: Yes, that check seems to be redundant. But let's leave removing it for another pull.

Thanks for adding tests.
 

90. bug report number : ['6545']
comment number: 130199346 
body: utACK. Nice catch!
 

comment number: 130202364 
body: utACK
 

comment number: 133045273 
body: backported to 0.11 as  649f5d9c1100bb3cbace724900f035939df5ea11
 

91. bug report number : ['6506']
comment number: 127346171 
body: Only absolute paths are supported for configuration options. Probably needs a check.
 

comment number: 127357095 
body: Actually it looks like relatives paths are supported for configuration options. -conf, -pid, and -wallet accept relative paths which are interpreted as relative to the data directory. (-wallet only supports relative paths)

So the current behavior seems to be consistent. It would be nice if it was documented somewhere that relative paths are interpreted as relative to the data directory, but I'm not sure where the best place to put that would be.
 

comment number: 127369885 
body: Oops, `-wallet` is not supposed to accept paths at all (the database must be in the 'database environment', which is always the data dir), just file names.

For `-conf` and `-pid` you are right, `GetConfigFile` and `GetPidFile` has explicit code to prepend the datadir.
Could be better documented. I wasn't aware either.
In a way this makes sense, it makes it easy to specify an alternative config file within the datadir. 
Though the interaction is a bit convoluted: the configuration file specified using -conf can in turn override `-datadir` :-)

Closing as expected behavior, then.
 

comment number: 127490441 
body: Created https://github.com/bitcoin/bitcoin/pull/6512
 

92. bug report number : ['6492']
comment number: 126709536 
body: It shows two overlapping blocks:

```
01400bb0-0142dd55 01400bb8 0000000000000000007a68c90b1926ff42418c73d7862dd8ac157ecc107105e5 332363 
01427437-01449430 0142743f 00000000000000000e1fc013481b1d4c700f856d90efaa4982675a728eb9fb32 332197 Overlap with last block (01400bb0,0142dd55)
01449430-014c6a68 01449438 000000000000000013c7ec167fb6346ea04bff43a2679abf9566df0773a92b36 332198 
```

This is quite an old blocks directory so it's possible that this happened due to the reindex issue solved by #5864.
 

93. bug report number : ['6468']
comment number: 124212188 
body: ACK
 

comment number: 124214253 
body: Added a tiny comment on top to prevent a crash when one tries to get a key from a `CBitcoinExtKeyBase` instance where no base58 decoded data is available.
 

comment number: 124447596 
body: Force push fixed @Diapolo nit.
 

comment number: 124599587 
body: ACK, apart from style nit.
 

comment number: 124634396 
body: @sipa Let me ask, what is happening with our clang-format cleanup ;)?
 

comment number: 124818379 
body: Fixed @sipa 's nit.
 

94. bug report number : ['6456']
comment number: 122519870 
body: I can confirm this resolves #6443, thanks!

As far as I can see the output is as expected, except for the difficulty, returned by `"getinfo"`, which is shown in e notation (`"difficulty": 4.656542373906925e-10` vs. `0.00000000`, as returned by Core 11.0). Edit: I wouldn't say this is bad though, as it offers a greater precision.
 

comment number: 122815654 
body: > as returned by Core 11.0). Edit: I wouldn't say this is bad though, as it offers a greater precision

Exactly - the fixed 8-digit formatting is for clarity in monetary amounts. 
Earlier it was applied to all numbers because JSON spirit had no other way.
But now we have full control over how values are rendered, and other floating point quantities such as bits, difficulty can be represented in full precision.
 

comment number: 122816087 
body: Tested ACK.

If i understand this right, then there is a slightly API change. Every double/float (non-monetary) comes now with a precision of 16 instead of 8 (because of https://github.com/bitcoin/bitcoin/pull/6456/files#diff-0f1b401041a14398229cf7e31b6db7eeR89). Because we are using `oss << std::setprecision(16) << val` it will rewrite things like `0.00000000046565423739069247` into scientific notation. That is what @dexX7 has detected.
 

comment number: 122913393 
body: Right. All numbers were 'cut' to %.8f notation, so it would have reported `0.00000000046565423739069247` as `0.00000000` instead of going to scientific notation.
E.g. a difficulty smaller than a "satoshi" was reported as 0. This makes no sense at all for non-monetary numbers. This is all within the limits of number representation in the JSON protocol.
 

comment number: 124211905 
body: ACK.  Happy to see VREAL go away.
 

95. bug report number : ['6438']
comment number: 121511279 
body: utACK, also needs backport to 0.11.
 

comment number: 121526927 
body: Fixes https://github.com/bitcoin/bitcoin/issues/6436
 

comment number: 121527036 
body: ACK
 

comment number: 121527102 
body: utACK
 

comment number: 121622937 
body: Backported to 0.11 as 253143860da9983d127251814f0665a5454e5030
 

comment number: 122203185 
body: Bacported to 0.10 as d4b1d5a8baf18e4c8d62846360c0c1c0c9331d70
 

96. bug report number : ['6436']
comment number: 121527074 
body: This has probably nothing todo with pruning. It seams a openssl config issue (https://github.com/bitcoin/bitcoin/pull/6438).

@maraoz: mind testing this issue with https://github.com/bitcoin/bitcoin/pull/6438?

Upgrading openssl to 1.0.1+ would also cure the issue.
 

97. bug report number : ['6427']
comment number: 120871626 
body: Could that be related to https://github.com/bitcoin/bitcoin/pull/6412?
 

comment number: 122968196 
body: I believe the RPC server is also holding on to old queried data as well since bitcoind is consuming a lot of memory on my machine which only happens when using it a lot.

![image](https://cloud.githubusercontent.com/assets/872832/8783040/2dd47dc4-2ece-11e5-9b5b-f88cd1cd7a02.png)
 

comment number: 122975261 
body: Are you willing/able to share the code that is querying for blocks/transactions?  If not, can you describe in detail how it utilizes the RPC interface?
 

comment number: 148474691 
body: Still happening with latest (110000) and crashing on a 16GB box.
With txindex=1 in bitcoin.conf, I am using an in-house blockchain parser that uses only the following RPC commands:
- getrawtransaction
- getrawmempool
- getblock
- getblockcount

There is clearly a memory leak with one of these commands, resulting in memory being completely consumed before crashing that requires constant restarting.
 

comment number: 152149834 
body: Memory usage doesn't look abnormal, 1747M virtual 632M resident.

Can you run bitcoind in gdb to get a traceback when the crash happens?
 

comment number: 152159817 
body: @thallium205 it might be worth showing statistics of a `bitcoind` instance on the same box that does not use the RPC commands, and another instance that does allow use of the RPC commands.
If the RPC usage is the only difference, and the memory usage still spikes, then, it at least hints at causality.
 

comment number: 215415321 
body: Closing due to inactivity
 

98. bug report number : ['6426']
comment number: 120835206 
body: Thanks for reporting here (I don't regularly check reddit).
I _think_ this is the same issue as reported here: Static Qt5 in Linux builds #6267 
 

comment number: 120842185 
body: Same for F21.
See picture.
The red arrow area is the icon .:(
![bildschirmfoto von 2015-07-13 09 55 39](https://cloud.githubusercontent.com/assets/6240474/8645204/8e45cbc4-2945-11e5-88b5-a25cc031727b.png)
 

comment number: 120847417 
body: Ubuntu 15.04

![s](https://static.md/83f3a9e7123917836af30eb4685ebab3.png)
 

comment number: 120870279 
body: For Ubuntu, the PPA version (https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin — expected to be available tomorrow) will likely not have this problem.
 

comment number: 120897953 
body: Issue confirmed.
It is a Qt5.2 upstream issue (related to https://bugreports.qt.io/browse/QTBUG-31762?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel).
Version 0.10.2 as well as 0.11.0 and the current master are affected.
**Building against Qt5.4.2 does solves the problem**. Just tested on Ubuntu 15.04.

Ubuntu 15.04 / `libqt5gui5 5.4.1+dfsg-2ubuntu4`
Bitcoin-Qt 0.10.2:
<img width="1358" alt="bildschirmfoto 2015-07-13 um 13 13 33" src="https://cloud.githubusercontent.com/assets/178464/8648750/99acb45a-2963-11e5-886e-662ff9178d0c.png">

Bitcoin-Qt – current master:
<img width="1467" alt="bildschirmfoto 2015-07-13 um 13 29 59" src="https://cloud.githubusercontent.com/assets/178464/8648760/a534576a-2963-11e5-9678-baca53e540ac.png">
 

comment number: 122397827 
body: > Building against Qt5.4.2 does solves the problem. Just tested on Ubuntu 15.04.

But did you test with a gitian (or depends) build, or did you build against Ubuntu's Qt? In the latter case you won't see the issue at all. This only happens for static builds.
 

comment number: 122402896 
body: I can confirm that the tray icon was working with my brief tests with static 5.4/5.5 builds from #6314.
 

comment number: 123294064 
body: https://github.com/bitcoin/bitcoin/issues/6426#issuecomment-120847417
[Ubuntu PPA](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin) version 0.11 works fine

![](http://static.md/e2c8de533e8f8d6ac8a65686b4344382.png)
![](http://static.md/cbd66d67547cf142288d8f4700798841.png)
 

comment number: 125171573 
body: Qt 5 has been bumped, fixed in next 0.11 release
 

99. bug report number : ['6412']
comment number: 120173358 
body: select() is also used in netbase, seems it would make sense to check there.  Also, if connect() were to return an EINVAL for any reason, that could trigger this in netbase.  Have you considered just printing the fd value?  For language I'd go simple "invalid file descriptor %ud from netbase on connect". 
 

comment number: 120226722 
body: utACK
 

comment number: 120422737 
body: Updated. The test is now done also in netbase (causing simple failure, as netbase does not usually print error messages), and when creating a listen socket.
 

comment number: 120429297 
body: Needs backport to 0.11 and 0.10 (doesn't seem to involved, I'm willing to do that)
 

comment number: 120430862 
body: See my branches nonselectsocket-0.11 and nonselectsocket-0.10.
 

comment number: 120449642 
body: @laanwj Done.
 

comment number: 120900812 
body: This brings up a warning, as SOCKET is defined as unsigned int:

```
compat.h: In function ‘bool IsSelectableSocket(SOCKET)’:
compat.h:99:18: warning: comparison of unsigned expression >= 0 is always true [-Wtype-limits]
     return (s >= 0 && s < FD_SETSIZE);
```
 

comment number: 122396579 
body: @sipa are you planning to fix the warning or should we not hold this up on that?
 

comment number: 122917195 
body: Backported to 0.11 as e8b87c8f78fd66ebeb10ce5dfcf72b0a5e73f120
Warning fixed in 89289d875da108c42ca013f33597eda46cb6eb53 (e8b87c8f78fd66ebeb10ce5dfcf72b0a5e73f120 in 0.11)

To 0.10 as 0739e6e57a4b59966588a79ac2646eb3264c4dfa ae52a7ffd1b3743e76220812c7f581c5c08f975b
 

100. bug report number : ['6394']
comment number: 119428508 
body: Good catch.
 

101. bug report number : ['6361']
comment number: 117735585 
body: We'll also have to bump the boost version in depends for this to work (currently 1.55), but I remember that was already the plan for 0.12.
 

comment number: 117901917 
body: @laanwj yes, we need to go ahead with the boost bump. I'm getting ready to leave for a few days for a conference, but I'll make the boost/qt bumps first priority when I get back. Ideally those should be done very early in the cycle so we have some testing.

Taking that one step further, I'll check the other deps while I'm at it and see if they need bumps too.
 

comment number: 117909484 
body: utACK
 

comment number: 117919878 
body: ACK
 

comment number: 120171885 
body: Posthumous ACK.
 

102. bug report number : ['6306']
comment number: 113564815 
body: The targeted 1-conf attack "Double-Spending of 1-Confirmation Transactions" described in [1] appears to be a real risk.  The vulnerability is reduced to a known level per attacker node by this bug fix.

Attacker blinds both funds receiver and a small miner to a 1-conf double spend, and the block containing it (attacker must be the first to inv the block to these nodes).  If the small miner produces a block, funds receiver believes he has 1 confirmation.
 

comment number: 116912849 
body: It'd be good to add a demo script and unittest of the attack to this patch to make it easier to test it. The qa/rpc-tests has a mininode implementation that you could use.
 

comment number: 125795089 
body: One of the tests in p2p-acceptblock.py was relying on being able to push a duplicate block from a single peer.  Updated that test to use another node.
 

comment number: 140747185 
body: ut ACK - travis is unhappy
 

comment number: 140844253 
body: There was discussion in #4547 against following this approach because it doesn't fully solve the problem.  I think a quick fix might be ok while we're waiting for something more substantial (P2P rewrite or #4831) but I'm not convinced there is no downside to this pull.  For example this might hinder a peer trying to resend a wallet transaction to you that you don't currently have because of your mempool was full or it was evicted. 
 

comment number: 159212220 
body: Closing in favor of #7079 which continues this
 

103. bug report number : ['6299']
comment number: 112923177 
body: Can you please cherry-pick #6298 into this, to see if the reindex test passes in travis.
 

comment number: 112926008 
body: @laanwj Incorporated #6298
 

comment number: 113090559 
body: Updated with the correct indentation (bigger diff).
 

comment number: 113140973 
body: utACK
 

comment number: 113581829 
body: Btw, for the sake of easier review, you can always do a diff that ignores whitespace via `git diff -w`.

To see that at github, just append ?w=1 to the url: https://github.com/bitcoin/bitcoin/pull/6299/files?w=1
 

comment number: 113839612 
body: Needed rebase.
@theuni Thanks, that's useful.
 

comment number: 114944514 
body: Tested ACK
 

comment number: 115633114 
body: There's an alternative solution to the bug in #6230.
 

comment number: 115693755 
body: ACK
 

104. bug report number : ['6297']
comment number: 112853136 
body: Thanks @morcos for reporting. Will have a look at this soon.
 

comment number: 112855972 
body: It's a matter of writing our own fixed-point parser that accepts the full JSON number syntax. Not rocket science, but will need a lot of testing, interpreting monetary amounts wrongly would be an extremely serious bug (that's why I hoped the time-tested `ParseMoney` would do... maybe adding eE\* isn't that involved, I don't know).
 

comment number: 118650592 
body: This makes PHP scripts unable to "talk" with Bitcoin RPC correctly when using values <0.0001 through json_encode.
 

comment number: 118760803 
body: Working on this now.
 

comment number: 181930644 
body: Fixed by #6379
 

105. bug report number : ['6284']
comment number: 112118331 
body: Hmm somehow the tests also check the old behavior. I don't understand. It seems very counter-intuitive. Updated the tests, although this may make the change more controversial.
 

comment number: 112435410 
body: I also don't understand the reasoning behind the old semantics.
 

comment number: 112583766 
body: Current behaviour in latest master

```
src/qt/bitcoin-qt -proxy=0 ->> Invalid -proxy address: '0'
src/qt/bitcoin-qt -proxy=1.0.0.0 ->> -proxy=1.0.0.0 is set.
src/qt/bitcoin-qt -proxy=1.0.0.0 -noproxy ->>  -proxy=1.0.0.0 is set.
src/qt/bitcoin-qt -proxy=1.0.0.0 -noproxy=0 ->> -proxy=1.0.0.0 is set
src/qt/bitcoin-qt -proxy=1.0.0.0 -noproxy=1 ->> -proxy=1.0.0.0 is set
src/qt/bitcoin-qt -noproxy -proxy=1.0.0.0 ->>  -proxy=1.0.0.0 is set
src/qt/bitcoin-qt -noproxy ->> Invalid -proxy address: '0'
src/qt/bitcoin-qt -noproxy=0 ->>  -proxy=1 is set
src/qt/bitcoin-qt -noproxy=1 ->> Invalid -proxy address: '0'
```

After applying this pull

```
src/qt/bitcoin-qt -proxy=0 ->> Invalid -proxy address: '0'
src/qt/bitcoin-qt -proxy=1.0.0.0 ->> -proxy=1.0.0.0 is set.
src/qt/bitcoin-qt -proxy=1.0.0.0 -noproxy ->> Invalid -proxy address: '0'
src/qt/bitcoin-qt -proxy=1.0.0.0 -noproxy=0 ->> -proxy=1 is set
src/qt/bitcoin-qt -proxy=1.0.0.0 -noproxy=1 ->> Invalid -proxy address: '0'
src/qt/bitcoin-qt -noproxy -proxy=1.0.0.0 ->> -proxy=1.0.0.0 is set
src/qt/bitcoin-qt -noproxy ->> Invalid -proxy address: '0'
src/qt/bitcoin-qt -noproxy=0 ->> -proxy=1 is set
src/qt/bitcoin-qt -noproxy=1 ->> Invalid -proxy address: '0'
```
 

comment number: 112683149 
body: @fanquake Proxy is not a boolean option, although `-noproxy` will be valid after #6272.

I agree that these `-noX=Y` semantics are a tad strange as well (which assigns `!Y` to X), but decided to keep them to make this not too big of a change.
For me personally, though, `-noX` only makes sense without argument. I've never felt the desire to use, say `-noX=0` to say `-X=1`.
 

comment number: 114374957 
body: I suspect the reasoning for this, was that -noX is meant to be deprecated, while -X=0 is the new form. I don't really care either way about changing it, though...
 

comment number: 114396410 
body: > I suspect the reasoning for this, was that -noX is meant to be deprecated

What makes you think that? `-noX` was introduced later (only in 0.6, according to the comment) while `-X=0` was (I suppose?) always possible.
 

comment number: 123248444 
body: Behavior change needs a mention in `doc/release-notes.md` [done]
 

106. bug report number : ['6282']
comment number: 111966576 
body: If `boost::path` gives any problems at static deinitialization, I still dont feel good with this.

My suggestion would be to precompute all the usages of `path` in `CDBEnv::Open`. E.g.

```
std::string strPath;
std::string strPathLogDir;
```

Then in the initialization

```
strPath = pathIn.string();
strPathLogDir = pathLogDir.string();
```

Remove the `boost::filesystem::path path` field. Replace the usages of `path` outside `CDBEnv::Open` with these precomputed strings.
 

comment number: 112030750 
body: @laanwj That suggestion is fine, I tried to be minimal invasive but will gladly remove the path field.
 

comment number: 112049594 
body: @laanwj See pull after rebase, I removed the `path` field, but as quite some functions require a boost::filesystem::path I couldn't eliminate all uses (e.g. `TryCreateDirectory()` and `boost::filesystem::remove_all()`). And also I didn't want to play with the `/` operator used in boost::path as dir separator, so I didn't replace it with the string `/`, which could cause problems on certain OSes, where a native path separator is perhaps different.
 

comment number: 112065095 
body: Seems the build faulire is unrelated to the pull: "No output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.

The build has been terminated"
 

comment number: 112073971 
body: Looks good to me, utACK, travis error is the misbehaving comparison tool again...
 

comment number: 112375001 
body: Now it passed, great!
 

comment number: 112402960 
body: > I removed the path field, but as quite some functions require a boost::filesystem::path I couldn't eliminate all uses

Right. Eliminating the uses of boost::filesystem is not the goal here, just avoiding that a static `filesystem::path` field stays around as part of CDBEnv, which this does now.
 

comment number: 112434428 
body: utACK
 

comment number: 114408803 
body: Backported to 0.11 as daf956b7b196769f8027026dd047e72412a9a039, thanks @luke-jr for the heads up
 

107. bug report number : ['6256']
comment number: 111515224 
body: utACK
 

comment number: 111979418 
body: Cherry-picked to 0.11 as fce474c9dfa1fd3f98f14f7c2866a6001b21ac9a
 

108. bug report number : ['6233']
comment number: 111828704 
body: Untested ACK
 

comment number: 113898380 
body: ut ACK
 

comment number: 113901126 
body: Been running on bitcoin.sipa.be for a week, no problems.
 

comment number: 115243554 
body: Thoughts on merging this into 0.11?  This is unfortunately difficult to test, but I did try to recreate the conditions that produced the infinite download bug I previously triggered, and verified that with this code no blocks were downloaded more than once.

Not a conclusive test of the code however.

(To be clear, I don't believe there is a potential infinite download bug in master anymore, that risk was eliminated already, but I think it's possible for a block to be downloaded twice.)
 

comment number: 115277230 
body: utACK
 

comment number: 115279661 
body: Cherry-picked to 0.11 as a587606525242f76684208191436999ceadb8b56
 

109. bug report number : ['6223']
comment number: 108137191 
body: There could be a set of mutation tests for common typos likely to happen with `bitcoin-cli`. Some of these may not be RPC issues?
 

comment number: 108214518 
body: This appears to be a problem with `bitcoin-cli`, not the RPC server. e.g. `AmountFromValue` calls `value.get_real()` which will raise an exception if the value is not a number.

But bitcoin-cli's command line to JSON parsing (`RPCConvertValues`) probably has no proper error handling. If so, I'm surprised this only gets discovered now.
 

comment number: 108223604 
body: I reproduce this on master:

```
src/bitcoin-cli  -testnet sendtoaddress msj42CCGruhRsFrGATiUuh25dtxYtnpbTx 1.0sds
```

Paradoxally, it looks like #6121 solves it (the new JSON parser is more thorough?):

```
src/bitcoin-cli  -testnet sendtoaddress msj42CCGruhRsFrGATiUuh25dtxYtnpbTx 1.0sds
error: {"code":-32700,"message":"Parse error"}
```
 

comment number: 108231273 
body: I've narrowed it down to the JSON parser. Added the following tests, which should pass, but fail:

```
BOOST_CHECK_EQUAL(read_string(std::string("1.0sds"), value), false);
BOOST_CHECK_EQUAL(read_string(std::string("1.0]"), value), false);
```

Somehow trailing characters don't affect it. Prefixing character does. This passes:

```
BOOST_CHECK_EQUAL(read_string(std::string("[1.0"), value), false);
```
 

comment number: 108231665 
body: UniValue does parse JSON more strict and handles some special cases manually. Maybe this is fixed after merging #6121 but it would need at least a fix for 0.11 if we like to get this fixed there. Will also investigate soon.
 

comment number: 108232565 
body: @jonasschnelli I'm already looking into this - read_string currently doesn't check that it consumed the entire input stream, it's an easy fix, which makes sense to merge into 0.10 and 0.11.
 

comment number: 108234565 
body: See #6226
 

110. bug report number : ['6196']
comment number: 107135402 
body: I'm seeing the exact same assertion failure on windows 8.1. I disconnected the drive the database is on while it was downloading for the first time. Oops. The program should have a better way to recover from this.
 

comment number: 108461311 
body: Are you sure you haven't run out of memory? see #5670 and #6001. 
That was the issue on both occasions.
 

comment number: 108606963 
body: I was running out of space on the harddisk, but have moved the data dir to another drive with ample free space. It worked, then found the block data corrupt, restarted the block sync, and then trows this again at about 28 weeks behind.
 

comment number: 112417503 
body: You could try using the option (or in bitcoin.conf) `-dbcache=16`. There are other tips to reduce memory usage of bitcoind here: https://gist.github.com/laanwj/efe29c7661ce9b6620a7
 

comment number: 112425753 
body: I've found out the computer had 'default' power usage settings, so it would suspend after _x_ hours of inactivity, but this was invisible to me by connecting to the machine via remote desktop... If the process was getting stalled or killed by this, it may explain why data got corrupt. I expect the system to run smoothly now, so am closing this issue. Thanks for your input.
 

111. bug report number : ['6186']
comment number: 105420922 
body: Tested ACK.
 

comment number: 105421214 
body: Needs backport to 0.10 branch as well
 

comment number: 105789002 
body: Rebased to 0.10 via e4a7d51537509dab765976f8642f9e15b84408bb ae3d8f371ab2e6886e1ffab8d16495ffccbfc5e4
 

112. bug report number : ['6184']
comment number: 105274548 
body: This one works correctly but is getting old

http://luke.dashjr.org/programs/bitcoin/files/bitcoind/misc/0.10.x/0.10.0rc3.autoprune/
 

comment number: 105278260 
body: @BitpopCoin Can you post your debug.log? What `-prune=`-target  did you set?
 

comment number: 105288961 
body: Bitcoin.conf
prune=25000

I deleted the debug, I can try again if you think it should be working and it's on my end.
 

comment number: 105293021 
body: It had

Autoprune configured to use less than 25000MiB on disk for block files
 

comment number: 105293539 
body: @BitpopCoin you are aware of that the 25GiB are only for the blockstore (not including utxo set which should be around 761MB, etc.)?
 

comment number: 105299328 
body: Yes the working version hits 26gb which is fine.
 

comment number: 106007636 
body: I still have the issue. I tried the latest snapshot.

Xxx
 

comment number: 106017050 
body: Thanks for the log.
Could you run again with `-debug=prune` and upload the debug.log again?
 

comment number: 106138949 
body: @jonasschnelli

Xxx
 

comment number: 106268894 
body: @laanwj i think this should get reopened.
It looks after a real issue:
Found the following in the logs (partial output of `| grep prune`):

```
2015-05-28 01:13:12 Prune: target=2500MiB actual=2462MiB diff=37MiB max_prune_height=197394 removed 0 blk/rev pairs
2015-05-28 01:13:14 Prune: target=2500MiB actual=2463MiB diff=36MiB max_prune_height=197504 removed 0 blk/rev pairs
2015-05-28 01:13:16 Prune: target=2500MiB actual=2470MiB diff=29MiB max_prune_height=197587 removed 0 blk/rev pairs
2015-05-28 01:13:16 Prune: target=2500MiB actual=2471MiB diff=28MiB max_prune_height=197593 removed 0 blk/rev pairs
2015-05-28 01:13:19 Prune: target=2500MiB actual=2486MiB diff=13MiB max_prune_height=197687 removed 0 blk/rev pairs
2015-05-28 01:13:19 Prune: target=2500MiB actual=2487MiB diff=12MiB max_prune_height=197688 removed 0 blk/rev pairs
2015-05-28 01:13:21 Prune: target=2500MiB actual=2503MiB diff=-3MiB max_prune_height=197699 removed 0 blk/rev pairs
2015-05-28 01:13:23 Prune: target=2500MiB actual=2520MiB diff=-20MiB max_prune_height=197744 removed 0 blk/rev pairs
2015-05-28 01:13:24 Prune: target=2500MiB actual=2526MiB diff=-26MiB max_prune_height=197788 removed 0 blk/rev pairs
2015-05-28 01:13:26 Prune: target=2500MiB actual=2527MiB diff=-27MiB max_prune_height=197876 removed 0 blk/rev pairs
2015-05-28 01:13:28 Prune: target=2500MiB actual=2530MiB diff=-30MiB max_prune_height=197967 removed 0 blk/rev pairs
2015-05-28 01:13:29 Prune: target=2500MiB actual=2532MiB diff=-32MiB max_prune_height=198042 removed 0 blk/rev pairs
```
 

comment number: 106269217 
body: @jonasschnelli Fine with reopening, but then the issue should get a relevant title
 

comment number: 106269697 
body: @BitpopCoin: could you rename the issue title? Something that reflects the problem.
 

comment number: 106303705 
body: @BitpopCoin Thanks for reporting this; I think I see the problem.

The pruning code enforces a requirement that the block files it keeps be contiguous, so that blockfile N will only be considered for pruning if blockfiles 0, ..., N-1 were already pruned.

There is also a requirement that no block file will be pruned if there's a block in the file with a height that is too close to the height of the tip.  What appears to be happening here is that some peer likely inv'ed you a block at the tip while you were syncing (this is normal behavior); that block was stored in block file 5, and since its height is so large, it effectively stops pruning from taking place.  From the debug.log:

`2015-05-28 01:03:59 Leaving block file 5: CBlockFileInfo(blocks=7446, size=134174305, heights=148758...358316, time=2011-10-10...2015-05-28)`

For what it's worth, if the node were able to fully sync, I believe eventually the pruning targets would be respected again.  This is certainly undesirable behavior though.

I think the best fix may be to relax the restriction that files be contiguous, which will complicate the logic slightly but seems likely to be worth it to avoid this outcome.
 

comment number: 106533236 
body: For what it's worth, I've tried it many times. Last few times I've used 2.5 gb to speed things up. But I've originally used 25gb and it continues past 30gb breaking my droplet.

I think pruning will be used for limited disks and going over at all will break things. Can you add a quit for now? So when I do test I don't have to spend an extra hour imaging the machine and restoring because the disk filled up and other things could have broke.

I run many nodes and upgrading will double my costs so I need pruning. I was going to move to vultr large storage but they don't have imaging. Thanks guys.
 

comment number: 106625421 
body: Indeed, there appears to be a bug here.  Just out of curiosity, are you using the relay network client with your pruned nodes?  I was able to reproduce something similar locally using the relay network during initial sync.
 

comment number: 106641476 
body: Yes the relay node is connected.

addnode=public.us-west.relay.mattcorallo.com:8335
 

comment number: 106645885 
body: Good.  That makes sense.  I was wondering how a failure like this would have slipped through all the testing that has taken place thus far.  There is definitely a bug here and there are a few routes for fixing it with varying levels of risk.  There will be a patch forthcoming.

In the meantime, if you want to test pruning, disable the relay node during initial sync (and catchup syncs if your nodes go offline, or just altogether).  It's a difficult to trigger corner case if the relay node isn't involved.

Thanks for reporting!
 

comment number: 106657775 
body: I was trying to think of anything odd about my node but I kept only thinking about the permissions. Another Bitcoin created .bitcoin but it ran as root and could write so I ignored the permissions issue, which was correct but I forgot I was using the relay network.

I'll wait to try it again until a possible patch so let me know and I'll test. I went back to Luke's version but it's getting old. Thanks.
 

comment number: 110686745 
body: Can you help testing #6221? It should solve this issue by also pruning when blocks are non-contiguous.
 

comment number: 110690057 
body: I tried the nightly on 6-5 which didn't help. Should I try tonight's?
 

comment number: 110704024 
body: Trying http://builds.jonasschnelli.ch/nightlybuilds/2015-06-10/ now
 

comment number: 110721669 
body: FYI #6221 hasn't been merged yet, so that build won't help (I believe that's just what was in master).
 

comment number: 110725752 
body: Just started a build for #6221 (https://builds.jonasschnelli.ch/pulls/6221/). @BitpopCoin: you should test this build. It's the master with 6221 on top. Ready in about 30mins.
 

comment number: 110728471 
body: @jonasschnelli Thanks! Also if you and @BitpopCoin are up for it, #6224 goes further to make pruning more effective when using the relay node.
 

comment number: 110739794 
body: Ok will both be in today? I already started, I'll stop and wait. Thanks.
 

comment number: 110744050 
body: I'm trying https://builds.jonasschnelli.ch/pulls/6221/bitcoin-0.11.99-linux64.tar.gz
 

comment number: 110957463 
body: It worked! Will you tell me when it's in the nightly then the rc? 
 

comment number: 112418197 
body: It has been merged into master so it will be in any nightlies from ~ 5 days ago, and it has been backported to 0.11 so will also be in next rc (rc2).
 

comment number: 112655263 
body: Thanks guys, great work
 

113. bug report number : ['6183']
comment number: 105410432 
body: This changes the semantics of a function that is used in consensus.

However the only uses of `IsFinalTx` with default arguments (before this change) are in the wallet and tests so I think it is ok.

Though now that we're changing this function anyway, I'd prefer splitting up `IsFinalTx` into:
- A function `IsFinalTx` that takes explicit `nBlockHeight` `nBlockTime` arguments. This is a consensus function independent of program state.
- A function `IsFinalTxNow` that calls `IsFinalTx` with the default arguments (`chainActive.Height() + 1` and `GetAdjustedTime()`), to be used by the wallet and such.
 

comment number: 105415633 
body: @laanwj +1

Changing the behaviour of a function without renaming it or otherwise breaking old code using it, is asking for trouble.
 

comment number: 105829767 
body: See @jtimon's #6063, it sort of does what I'm describing above, apart from renaming the function.
 

comment number: 105849719 
body: @laanwj Split into two functions.

In doing so I also had to add part #6177 

Any thoughts on what should happen at https://github.com/bitcoin/bitcoin/blob/28bf06236d3b385e95fe26a7a742395b30efd6ee/src/test/miner_tests.cpp#L251?
 

comment number: 105886824 
body: Any reason not to just rebase on top of #6063 ?
That way the function that keeps the old name does what it used to do while the new one has the different name (which will also be more consistent with other consensus functions and will avoid creating unnecessary conflicts with other open PRs [see #6051 ] and other old branches based on them). 

> Any thoughts on what should happen at https://github.com/bitcoin/bitcoin/blob/28bf06236d3b385e95fe26a7a742395b30efd6ee/src/test/miner_tests.cpp#L251 ?

I believe testing the new method would be good. This is just another example of how globals make testing more difficult.
 

comment number: 105905555 
body: Looks good to me now.

@jtimon The reason for renaming the function is outlined in my last post, as well as @luke-jr's reply - as this pull changes the functionality of the function, so to be sure that all caller sites are 'aware' of this it makes sense to rename it.
Apart from that I have no opinion on how the functions should be called.
 

comment number: 105928917 
body: @laanwj Well, a caller like IsFinalTx(tx, 0, 0) won't work as expected.
The new function could be the consensus-friendly one, as in #6063.
That would also make my life easier, although I guess saving developers' time is not that strong of an argument...
Keeping IsFinalTx functionally identical (before maybe deprecating it) is a stronger argument.
You can also create a third one dependent on the globals and without parameters (like CheckFinalTransaction here) and probably call it IsFinalTx just like the other global-dependent one.
 

comment number: 106071996 
body: Personally I prefer the terminology "IsFinalTx()" for the "no-context" consensus-critical check, and "CheckFinalTx()" for the context-dependent non-consensus-critical check.
 

comment number: 106198465 
body: > Personally I prefer the terminology "IsFinalTx()" for the "no-context" consensus-critical check, and "CheckFinalTx()" for the context-dependent non-consensus-critical check.

As said, Check is being used by other consensus functions (stateless) and IsFinalTx was global-state dependent. For consistency, it would be better to have the consensus version start with Check. But since this may be considered bikesheding, let me explain what the options I see. Let's imagine this in smaller commits that have been squashed and consider stopping at each point.

1) Fix the bug without touching IsFinalTx, simply by appropriately  adapting the arguments in the pertinent calls (like the one in miner). We could simply stop here (or at any point).

2) Separate a stateless (consensus-friendly) version of the function, like in #6063 .

3) Every call to the old function that passes both arguments and passes them as non-null values, can be safely replaced with a call to the new function, great. You can go further and only leave the old calls that were using the default null values (triggering the replacement with the global state).

4) Now we can safely remove the optional parameters from the old function, since nobody is using them (the calls that use the parameters now call to the new statelss function).

5) Maybe we wanted to make the fix at this point instead of doing it first, since now you can fix it inside the stateless function and presumably less calls will be affected.

6) Assuming we had chosen IsFinalTx for the old global-state-dependent function and CheckFinalTx for the new stateless version (as in #6063 ), we can now switch the names to gratuitously increase the total diff, make the stateless version name less consistent with other consensus functions names and complicate the rebase of branches that were already separating those functions (like #6051 and branches based on it) or that were touching changing IsFinalTx (like https://github.com/maaku/bitcoin/commits/seqno-cltv-csv).

Let's please stop before 6. Let's forget about naming and making me and possibly other people work more. I propose to use a cleaner git history as the main criterion. My approach is better because it will produce a smaller total diff (since some calls that were using the default values can remain untouched). 
 

comment number: 106286667 
body: Something you're probably not aware of re: CheckFinalTx() is that I'll be submitting another pull-req once this is merged to change CheckFinalTx() to use GetMedianTime() rather than GetAdjustedTime(). This is important for a number of security related reasons. (most discussed before on #bitcoin-wizards) After that I'll be proposing a soft-fork enforcing this within blocks themselves.

My thinking re: _not_ renaming IsFinalTx() is taking that into account, because IsFinalTx() in that case would be relegated to purely consensus-critical function deep in the bowels of validation, with CheckFinalTx() being what you'd expect people to normally be using to answer the question "Is the transaction (effectively) final right now?" (possibly IsFinalTx() might even get renamed to OldIsFinalTx() to further hammer home that point)

Now, at some point in the implementation of that BIP I wouldn't be surprised if it makes sense to make it possible to provide a "chain tip" parameter to CheckFinalTx() to tell it what chain you're checking with respect too, and thus what's the median time, but for now the consensus-critical stuff can stay the way it is. Importantly, by changing everything else we get it all onto a new function with guaranteed semantics of "just figure out if this transaction is final according to whatever rules exist" - exactly what you'd expect from a Check*() function! Equally, when that chainTip parameter does get added, we'll be sure to catch everything that needs to be updated in one fell swoop. (if it's not done as a default parameter)

Anyway, smaller total diffs aren't necessarily always a good thing. In this case, by changing the function name we help clue people in to think "Why did IsFinalTx() change names?" "What's different about the design now?", hopefully setting the stage to discover things like a future median time rule change.
 

comment number: 106390582 
body: > "just figure out if this transaction is final according to whatever rules exist" - exactly what you'd expect from a Check*() function! 

I would also expect that function to be stateless!

> Anyway, smaller total diffs aren't necessarily always a good thing. In this case, by changing the function name we help clue people in to think "Why did IsFinalTx() change names?" "What's different about the design now?", hopefully setting the stage to discover things like a future median time rule change.

Then why keep the name IsFinalTx at all when the function is changing from global-state-dependent to stateless?
What about using CheckFinalTx for the stateless one and finding anther name for the convenience new one? Like, I don't know, TestFinalTx or something.
That alone would make me happy.

> Something you're probably not aware of re: CheckFinalTx() is that I'll be submitting another pull-req once this is merged to change CheckFinalTx() to use GetMedianTime() rather than GetAdjustedTime(). > This is important for a number of security related reasons. (most discussed before on #bitcoin-wizards) After that I'll be proposing a soft-fork enforcing this within blocks themselves.

Ok, I didn't know this. I have to say that passing a CBlockIndex\* from the beginning instead of using the global tip would make the function more stateless and my concerns with it being named CheckFinalTx would be lower, specially if it's going to be fully statelss later by not calling GetAdjustedTime().
What about passing a CBlockIndex from the beginning? This will not increase the total diff either.
Maybe also moving to from GetAdjustedTime to GetMedianTime in this PR. Tat would make CheckFinalTx stateless from the beginning: that would make me happy as well.

So, to reiterate and in summary: a function named CheckFinalTx should be as stateless as possible from the beginning: using the global activeTip inside it, even temporarily, seems horrendous to me.
I now realize that there's more options than I was considering to make that happen.
 

comment number: 106399229 
body: Note that for the last option, CheckFinalTx could optionally take the time (which callers that use it would set as GetAdjustedTime) which is set to pindexTip->GetMedianTime() inside if it's not provided (or 0 is passed).
Then your softfork would merely consist on removing the optional parameter to always use pindexTip->GetMedianTime.
I believe that would be the clearest history possible for those plans.
And I could also cleanly move both functions to consensus (do we still need 2 functions at this point?) in #6051 .
 

comment number: 106453842 
body: > Then why keep the name IsFinalTx at all when the function is changing from global-state-dependent to stateless?

Again, from the point of view of the code that mattered, IsFinalTx() was a stateless function... That it potentially wasn't was an unfortunate bug, not a feature.

Equally, we can't get rid of it after a soft-fork and replace it with some CheckFinalTx() or whatnot that takes block indexes, as the old behavior is still needed to verify old blocks.

Re: adding CBlockIndex's and the like right now, that needs some discussion and thought, so it's not going to happen in this pull-req.
 

comment number: 106471202 
body: > Re: adding CBlockIndex's and the like right now, that needs some discussion and thought, so it's not going to happen in this pull-req.

At least moving up the use of the global chainActive shouldn't generate much discussion.
Forcing the callers to call GetAdjustedTime themselves shouldn't be controversial either, specially since you're already touching those lines.
At that point, I would be happy with the new one being named CheckFinalTx or (even Consensus::CheckFinalTx) because it would already be stateless (even without using GetMedianTime). Even not forcing them to call GetAdjustedTime would be acceptable, but there's really no good reason to use chainActive inside a new function no matter how it is named. 

> Equally, we can't get rid of it after a soft-fork and replace it with some CheckFinalTx() or whatnot that takes block indexes, as the old behavior is still needed to verify old blocks.

As said I would be happy with both:

1) Maintaining it as CheckFinalTx (new name because nw it's stateless) and maybe unify it with the new TestFinalTx in the future.

2) If the new function is going to be stateless and named CheckFinalTx, we can maintain it as IsFinalTx or IsFinalTxOld or something.

So even assuming we want to have 2 separate functions for now, there's at least 2 options for getting a stateless (consensus-friendly) one named CheckFinalTx in this PR (so I would be happy to close #6063 and rebase #6051 on top of this).
 

comment number: 106569366 
body: > Forcing the callers to call GetAdjustedTime themselves shouldn't be controversial either, specially since you're already touching those lines.

If I did that, we'd have to re-touch a whole bunch of code all over again later... Notably, that's the kind of design mistake that lead to the bug this pull-req is fixing (re)appearing in the first place.

Anyway, continuing this discussion is a waste of time. @laanwj do whatever you want, just make sure this bug actually gets fixed.
 

comment number: 106608088 
body: > If I did that, we'd have to re-touch a whole bunch of code all over again later... Notably, that's the kind of design mistake that lead to the bug this pull-req is fixing (re)appearing in the first place.

Fair enough, don't do that then. 
Can we at least avoid the gratuitous use of the global chainActive in the new function?
 

comment number: 107381107 
body: ACK. Merging this as-is. Can discuss naming later but I think the naming is fine.
(I was about to suggest that the new `CheckFinalTx` can be moved to the wallet, but unfortunately there's one use left in main.cpp itself in `AcceptToMemoryPool`)
 

